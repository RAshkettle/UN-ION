//kage:unit pixels

package main

var Time float
var Resolution vec2

func rotate(p vec2, a float) vec2 {
	return vec2(p.x*cos(a) - p.y*sin(a), p.x*sin(a) + p.y*cos(a))
}

func rand1(n float) float {
	return fract(sin(n) * 43758.5453123)
}

func rand2v(n vec2) float {
	return fract(sin(dot(n, vec2(591.32, 391.32))))
}

func rand3v(n vec3) float {
	return fract(sin(dot(n, vec3(591.32, 391.32, 623.54))))
}

func rand2(p vec2) vec2 {
	return fract(vec2(sin(p.x*591.32 + p.y*154.077), cos(p.x*391.32 + p.y*49.077)))
}

func voronoi3(x vec2) (vec3, vec4) {
	voronoiRandK := 0.8
	p := floor(x)
	f := fract(x)

	i1 := vec2(0.0)
	i2 := vec2(0.0)
	res := vec3(8.0)
	
	for j := -1; j <= 1; j++ {
		for i := -1; i <= 1; i++ {
			b := vec2(float(i), float(j))
			r := b - f + rand2(p + b) * voronoiRandK

			d := abs(r.x) + abs(r.y)

			if d < res.x {
				res.z = res.y
				res.y = res.x
				res.x = d
				i2 = i1
				i1 = p + b
			} else if d < res.y {
				res.z = res.y
				res.y = d
				i2 = p + b
			} else if d < res.z {
				res.z = d
			}
		}
	}
	cellCenters := vec4(i1, i2)
	return res, cellCenters
}

func cubicPulse(c, w, x float) float {
	x = abs(x - c)
	if x > w {
		return 0.0
	}
	x /= w
	return 1.0 - x*x*(3.0-2.0*x)
}

func Fragment(position vec4, texCoord vec2, color vec4) vec4 {
	PI := 3.14159265359
	
	uv := (texCoord*Resolution - Resolution*0.5) * 2.0 / Resolution.y
	uv.x *= Resolution.x / Resolution.y

	uv = rotate(uv, sin(Time * 0.10))
	uv.x += Time * 0.3

	// First wire
	scale := 4.0
	width := 0.6
	vr, cellCenters := voronoi3(uv * scale + 10.0)
	d := vr.y - vr.x
	if vr.z - vr.y < width && vr.y - vr.x < width {
		d = max(width - (vr.z - vr.y), d)
	}
	cellHashes := vec2(rand2v(cellCenters.xy), rand2v(cellCenters.zw))
	wire := cubicPulse(width, 0.06, d)

	// Light
	lightX := (rotate(uv, PI/8.0).x + Time*0.5) * 5.0
	lightHash1 := rand1(floor(lightX))
	lightValue1 := fract(lightX)
	lightX = (rotate(uv, PI*5.0/8.0).x + Time*0.2) * 5.0
	lightHash2 := rand1(floor(lightX) + 0.5)
	lightValue2 := fract(lightX)
	lightX = (rotate(uv, PI*9.0/8.0).x + Time*0.2) * 5.0
	lightHash3 := rand1(floor(lightX) + 0.5)
	lightValue3 := fract(lightX)
	lightX = (rotate(uv, PI*13.0/8.0).x + Time*0.2) * 5.0
	lightHash4 := rand1(floor(lightX) + 0.5)
	lightValue4 := fract(lightX)
	
	light := 0.0
	lightFrequency := 0.002
	if rand3v(vec3(cellHashes.xy, lightHash1)) < lightFrequency {
		light = wire * cubicPulse(0.5, 0.25, lightValue1) * 3.0
	}
	if rand3v(vec3(cellHashes.xy, lightHash2)) < lightFrequency {
		light += wire * cubicPulse(0.5, 0.25, lightValue2) * 3.0
	}
	if rand3v(vec3(cellHashes.xy, lightHash3)) < lightFrequency {
		light += wire * cubicPulse(0.5, 0.25, lightValue3) * 3.0
	}
	if rand3v(vec3(cellHashes.xy, lightHash4)) < lightFrequency {
		light += wire * cubicPulse(0.5, 0.25, lightValue4) * 3.0
	}

	// Second parallel wire
	if (cellHashes.x - cellHashes.y) > 0.0 {
		w := cubicPulse(width-0.1, 0.06, d)
		wire += w
	}

	// Background wire layer
	scale *= 0.4
	vr2, cellCenters2 := voronoi3(uv * scale + 30.0)
	d = vr2.y - vr2.x
	if vr2.z - vr2.y < width && vr2.y - vr2.x < width {
		d = max(width - (vr2.z - vr2.y), d)
	}
	cellHashes = vec2(rand2v(cellCenters2.xy), rand2v(cellCenters2.zw))
	backWire := cubicPulse(width, 0.06, d)
	if (cellHashes.x - cellHashes.y) > 0.0 {
		w := cubicPulse(width-0.1, 0.06, d)
		backWire += w
	}
	wire = max(wire, backWire * 0.3)

	// Background noise
	wire += vr.x*0.3 + 0.3

	// Apply light
	wire = wire * 0.4 + light
	col := clamp(vec3(0.4, 0.8, 1.0) * wire, vec3(0.0), vec3(1.0))
	col *= 0.7

	return vec4(col, 1.0)
}
